brca = read.csv("brca_data_w_subtypes.csv")
# head(brca)
brca = read.csv("brca_data_w_subtypes.csv")
head(brca)
brca = read.csv("brca_data_w_subtypes.csv")
# head(brca)
str(brca)
library(tidyverse)
ads = read.csv("https://uofi.box.com/shared/static/9b9ecldtxkr23wb3uc36wwbn2l5ylpyx.csv")
trips = read.csv("https://uofi.box.com/shared/static/0pyqnfpl40kr5do7fue8t85vva11ynjm.txt")
delivery = read.csv("https://uofi.box.com/shared/static/o2bqah52ioj0p0q4msvna7ixk8d9lsh4")
str(ads)
str(trips)
str(delivery)
set.seed(651978735)
n = dim(sub)[1]
test_size = as.integer(0.25 * n)
test_idx = sample(1:n, test_size) # 25% of the sample size
brca = read.csv("brca_data_w_subtypes.csv")
# head(brca)
dim(brca) # 705 rows, 1941 columns
names(brca)[1937:1941] # outcomes
# 1936 covariates: 860 copy number variations (cn), 249 somatic mutations (mu), 604 gene expressions (rs), and 223 protein levels (pp)
# order: rs 1:604, cn 605:1464, mu 1465:1713, pp 1714:1936
brca = brca[,-1937] # discard `vital.status`
names(brca)[1937:1940]
# unique values of responses
unique(brca$PR.Status)
unique(brca$ER.Status)
unique(brca$HER2.Final.Status)
unique(brca$histological.type)
# only use Negative and Positive for PR.status, ER.status, and HER2.Final.Status
# PR.status and ER.status are highly correlated
table(brca$PR.Status)
table(brca$ER.Status)
table(brca$HER2.Final.Status)
table(brca$histological.type)
# sub is the dataset we will use for modeling
# all of the null values are removed
sub = brca[(brca$PR.Status == "Positive" | brca$PR.Status == "Negative") &
(brca$ER.Status == "Positive" | brca$ER.Status == "Negative") &
(brca$HER2.Final.Status == "Positive" |
brca$HER2.Final.Status == "Negative"),]
dim(sub)
# the input variables have the indices below
# rs 1:604, cn 605:1464, mu 1465:1713, pp 1714:1936
rs = sub[1:604] # the subset that only contains rs
corr = round(cor(rs), 2) # correlation matrix
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,] # stores correlations that are greater than 0.8 -> multicollinearity
dim(idx)
names(idx) = c("i", "j", "corr")
# remove highly-correlated variables
rmv = idx[idx$j %in% names(sort(table(idx$j), decreasing = T)[1:61]),]$i
rmv = unique(rmv)
length(rmv)
rs = rs[,-rmv]
cn = sub[605:1464]
corr = round(cor(cn), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = idx[idx$j %in% names(sort(table(idx$j), decreasing = T)[1:683]),]$i
rmv = unique(rmv)
length(rmv)
cn = cn[,-rmv]
mu = sub[1465:1713]
corr = round(cor(mu), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = idx[idx$j %in% names(sort(table(idx$j), decreasing = T)[1:10]),]$i
rmv = unique(rmv)
length(rmv)
# there is no multicollinearity within mu, so no variable is removed here
# mu = mu[,-rmv]
pp = sub[1714:1936]
corr = round(cor(pp), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = idx[idx$j %in% names(sort(table(idx$j), decreasing = T)[1:683]),]$i
rmv = unique(rmv)
length(rmv)
pp = pp[,-rmv]
a = rs$rs_CLEC3A
mean(a)
sd(a)
mean(a) + c(-1, 1) * 3 * sd(a)
a[a < mean(a) - 3 * sd(a) | a > mean(a) + 3 * sd(a)]
n_outlier = 0
row_idx = c()
for (i in 1:ncol(rs)) {
a = rs[,i]
n_outlier = length(a[a < mean(a) - 3 * sd(a) | a > mean(a) + 3 * sd(a)])
if (n_outlier > 0) {
row_idx = c(row_idx, which(a %in% a[a < mean(a) - 4 * sd(a) | a > mean(a) + 4 * sd(a)]))
}
}
y = as.factor(sub$PR.Status)
y = ifelse(y == "Positive", 1, 0)
sub2 = cbind(rs, cn, mu, pp, y) # cleaned dataset with PR.status as response
dim(sub2)
set.seed(651978735)
n = dim(sub)[1]
test_size = as.integer(0.25 * n)
test_idx = sample(1:n, test_size) # 25% of the sample size
Xtest = sub2[test_idx, -ncol(sub2)]
Xtrain = sub2[-test_idx, -ncol(sub2)]
ytest = sub2[test_idx, ncol(sub2)]
ytrain = sub2[-test_idx, ncol(sub2)]
library(e1071)
svm.fit = svm(ytrain ~., data=Xtrain,
type="C-classification", kernel="linear", scale=F, cost=1)
table("fitted" = svm.fit$fitted, "actual" = ytrain) # in-sample confusion matrix
pred = predict(svm.fit, newdata = Xtest)
table("fitted" = pred, "actual" = ytest)
(34 + 69) / (34 + 69 + 14 + 9)
library(ROCR)
roc = prediction(as.numeric(pred), ytest)
performance(roc, measure = "auc")@y.values[[1]]
perf = performance(roc, "tpr", "fpr")
plot(perf, colorize = T)
library(randomForest)
rf.fit = randomForest(Xtrain, as.factor(ytrain),
ntree=500,
mtry=10,
nodesize=10,
samplesize=400,
importance=TRUE)
pred = predict(rf.fit, Xtest)
table("fitted" = pred, "actual" = ytest)
(33 + 81) / (33 + 81 + 2 + 10)
roc = prediction(as.numeric(pred), ytest)
performance(roc, measure = "auc")@y.values[[1]]
perf = performance(roc, "tpr", "fpr")
plot(perf, colorize = T)
y = as.factor(sub$histological.type)
y = ifelse(y == "infiltrating lobular carcinoma", 1, 0)
sub3 = cbind(rs, cn, mu, pp, y) # cleaned dataset with PR.status as response
dim(sub3)
set.seed(651978735)
n = dim(sub)[1]
test_size = as.integer(0.25 * n)
test_idx = sample(1:n, test_size) # 25% of the sample size
Xtest = sub3[test_idx, -ncol(sub3)]
Xtrain = sub3[-test_idx, -ncol(sub3)]
ytest = sub3[test_idx, ncol(sub3)]
ytrain = sub3[-test_idx, ncol(sub3)]
sub3
sub3$y
dim(sub3)
dim(sub3)
sub3[,1099]
dim(sub3)
sub3[,-1099]
sub4 = sub3[,-1099]
sub4 = sub3[,-1099]
kmeanfit <- kmeans(img_expand, 2)
sub4 = sub3[,-1099]
kmeanfit <- kmeans(sub4, 2)
sub4 = sub3[,-1099]
kmeanfit <- kmeans(sub4, 2)
kmeanfit$cluster
sub4 = sub3[,-1099]
kmeanfit <- kmeans(sub4, 2)
kmeanfit$cluster - 1
sub4 = sub3[,-1099]
kmeanfit <- kmeans(sub4, 2)
table((kmeanfit$cluster - 1),sub3$y)
sub4 = sub3[,-1099]
kmeanfit <- kmeans(sub4, 2)
table((kmeanfit$cluster - 1),sub3$y)
acc = (394 + 2)/ nrow(sub4)
acc
brca = read.csv("brca_data_w_subtypes.csv")
brca$histological.type
unique(brca$histological.type)
brca = read.csv("brca_data_w_subtypes.csv")
dim(brca) # 705 rows, 1941 columns
names(brca)[1937:1941] # outcomes
# 1936 covariates: 860 copy number variations (cn), 249 somatic mutations (mu), 604 gene expressions (rs), and 223 protein levels (pp)
brca = brca[,-1937] # discard `vital.status`
names(brca)[1937:1940]
hist(brca$rs_CLEC3A, main="Histogram of rs_CLEC3A")
hist(brca$cn_A2ML1, main="Histogram of cn_A2ML1")
hist(brca$mu_ABCA12, main="Histogram of mu_ABCA12")
hist(brca$pp_A.Raf, main="pp_A.Raf")
# only use Negative and Positive for PR.status, ER.status, and HER2.Final.Status
# PR.status and ER.status are highly correlated
table(brca$PR.Status)
table(brca$ER.Status)
table(brca$HER2.Final.Status)
table(brca$histological.type)
# sub is the dataset containing no missing values
sub = brca[(brca$PR.Status == "Positive" | brca$PR.Status == "Negative") &
(brca$ER.Status == "Positive" | brca$ER.Status == "Negative") &
(brca$HER2.Final.Status == "Positive" |
brca$HER2.Final.Status == "Negative"),]
dim(sub)
# the input variables have the indices below
# rs 1:604, cn 605:1464, mu 1465:1713, pp 1714:1936
rs = sub[1:604] # the subset that only contains rs
corr = round(cor(rs), 2) # correlation matrix
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,] # stores correlations that are greater than 0.8 -> multicollinearity
# dim(idx)
names(idx) = c("i", "j", "corr")
idx[1:3,]
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
cn = sub[605:1464]
corr = round(cor(cn), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
cn = cn[,-rmv]
mu = sub[1465:1713]
corr = round(cor(mu), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
# there is no multicollinearity within mu, so no variable is removed here
# mu = mu[,-rmv]
pp = sub[1714:1936]
corr = round(cor(pp), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
pp = pp[,-rmv]
n_outlier = 0
row_idx_rs = c()
col_idx_rs = c()
for (i in 1:ncol(rs)) {
col = rs[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_rs = c(col_idx_rs, i)
row_idx_rs = c(row_idx_rs, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_rs = unique(row_idx_rs)
length(row_idx_rs)
length(col_idx_rs)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
row_idx = unique(c(row_idx_rs, row_idx_pp))
length(row_idx)
# columns with outliers are skewed (mostly right-skewed)
# for (i in col_idx_rs[1:20]) {
#   hist(rs[,i], main = names(rs)[i])
# }
# outlier example
hist(rs[,col_idx_rs[1]],
main = paste("right-skewed example:", names(rs)[col_idx_rs[1]]))
# no outlier example
hist(rs[,1],
main = paste("right-skewed example (no outlier):", names(rs)[1]))
hist(rs[,9],
main = paste("two mode example (no outlier):", names(rs)[9]))
# columns without outliers
# for (i in 1:16) {
#   hist(rs[,i])
# }
# log transform rs and normalize pp
rs_transformed = rs
pp_normalized = pp
for (i in 1:ncol(rs)) {
rs_transformed[,i] = log(1 + rs[,i])
}
for (i in 1:ncol(pp)) {
pp_normalized[,i] = qnorm(rank(pp[,i]) / (1 + length(pp[,i])))
}
hist(pp[,1],
main = paste("Before Normalization", names(pp)[1]))
hist(pp_normalized[,1],
main = paste("After Normalization", names(pp_normalized)[1]))
# cleaned dataset with PR.status as response
y = as.factor(sub$PR.Status)
y = ifelse(y == "Positive", 1, 0)
# sub2 = cbind(rs, cn, mu, pp, y)
sub2 = cbind(rs_transformed, cn, mu, pp_normalized, y)
dim(sub2)
set.seed(651978735)
n = dim(sub)[1]
test_size = as.integer(0.25 * n)
test_idx = sample(1:n, test_size) # 25% of the sample size
Xtest = sub2[test_idx, -ncol(sub2)]
Xtrain = sub2[-test_idx, -ncol(sub2)]
ytest = sub2[test_idx, ncol(sub2)]
ytrain = sub2[-test_idx, ncol(sub2)]
library(e1071)
svm.fit = svm(ytrain ~., data=Xtrain,
type="C-classification", kernel="linear", scale=F, cost=1)
table("fitted" = svm.fit$fitted, "actual" = ytrain) # in-sample confusion matrix
pred = predict(svm.fit, newdata = Xtest)
confusion_table = table("fitted" = pred, "actual" = ytest)
confusion_table
# (34 + 69) / (34 + 69 + 14 + 9)
(confusion_table[1, 1] + confusion_table[2, 2]) / test_size
library(ROCR)
roc = prediction(as.numeric(pred), ytest)
performance(roc, measure = "auc")@y.values[[1]]
perf = performance(roc, "tpr", "fpr")
plot(perf, colorize = T)
library(randomForest)
rf.fit = randomForest(Xtrain, as.factor(ytrain),
ntree=500,
mtry=10,
nodesize=10,
samplesize=400,
importance=TRUE)
pred = predict(rf.fit, Xtest)
confusion_table = table("fitted" = pred, "actual" = ytest)
confusion_table
(confusion_table[1, 1] + confusion_table[2, 2]) / test_size
roc = prediction(as.numeric(pred), ytest)
performance(roc, measure = "auc")@y.values[[1]]
perf = performance(roc, "tpr", "fpr")
plot(perf, colorize = T)
y = as.factor(sub$histological.type)
y = ifelse(y == "infiltrating lobular carcinoma", 1, 0)
sub3 = cbind(rs, cn, mu, pp, y) # cleaned dataset with PR.status as response
dim(sub3)
set.seed(651978735)
n = dim(sub)[1]
test_size = as.integer(0.25 * n)
test_idx = sample(1:n, test_size) # 25% of the sample size
Xtest = sub3[test_idx, -ncol(sub3)]
Xtrain = sub3[-test_idx, -ncol(sub3)]
ytest = sub3[test_idx, ncol(sub3)]
ytrain = sub3[-test_idx, ncol(sub3)]
ytest
y = as.factor(sub$histological.type)
y = ifelse(y == "infiltrating lobular carcinoma", 1, 0)
sub3 = cbind(rs, cn, mu, pp, y) # cleaned dataset with PR.status as response
sub3$y
