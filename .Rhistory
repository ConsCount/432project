col > mean(col) + 3 * sd(col)]))
}
}
row_idx_rs = unique(row_idx_rs)
length(row_idx_rs)
length(col_idx_rs)
# columns with outliers are skewed (mostly right-skewed)
for (i in col_idx_rs[1:20]) {
hist(rs[,i], main = names(rs)[i])
}
# right-skewed example
hist(rs[,9], main = names(rs)[9])
# right-skewed example
hist(rs[,9], main = names(rs)[9])
# right-skewed example
hist(rs[,9], main = names(rs)[9])
# right-skewed example
hist(rs[,3], main = names(rs)[3])
# right-skewed example
hist(rs[,col_idx_rs[1]], main = names(rs)[col_idx_rs[1]])
# columns with outliers are skewed (mostly right-skewed)
# for (i in col_idx_rs[1:20]) {
#   hist(rs[,i], main = names(rs)[i])
# }
# columns without outliers
for (i in 1:16) {
hist(rs[,i])
}
# right-skewed example
hist(rs[,col_idx_rs[1]],
main = paste("right-skewed example", names(rs)[col_idx_rs[1]]))
# right-skewed example
hist(rs[,col_idx_rs[1]],
main = paste("right-skewed example:", names(rs)[col_idx_rs[1]]))
hist(rs[,1])
# columns without outliers
for (i in 1:16) {
hist(rs[,i])
}
hist(rs[,9])
hist(rs[,1])
hist(rs[,9])
hist(rs[,1],
main = paste("right-skewed example (no outlier)", names(rs)[1]))
hist(rs[,9],
main = paste("two mode example (no outlier)", names(rs)[9]))
hist(rs[,1],
main = paste("right-skewed example (no outlier):", names(rs)[1]))
hist(rs[,9],
main = paste("two mode example (no outlier):", names(rs)[9]))
# outlier example
hist(rs[,col_idx_rs[1]],
main = paste("right-skewed example:", names(rs)[col_idx_rs[1]]))
# no outlier example
hist(rs[,1],
main = paste("right-skewed example (no outlier):", names(rs)[1]))
hist(rs[,9],
main = paste("two mode example (no outlier):", names(rs)[9]))
for (i in col_idx_pp[1:3]) {
hist(pp[,i], main = names(pp)[i])
}
for (i in col_idx_pp[1:3]) {
hist(pp[,i], main = names(pp)[i])
}
for (i in col_idx_pp[1:3]) {
hist(pp[,i], main = names(pp)[i])
}
n_outlier = 0
row_idx_rs = c()
col_idx_rs = c()
for (i in 1:ncol(rs)) {
col = rs[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_rs = c(col_idx_rs, i)
row_idx_rs = c(row_idx_rs, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_rs = unique(row_idx_rs)
length(row_idx_rs)
length(col_idx_rs)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
ncol(pp)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
brca = read.csv("brca_data_w_subtypes.csv")
dim(brca) # 705 rows, 1941 columns
names(brca)[1937:1941] # outcomes
# 1936 covariates: 860 copy number variations (cn), 249 somatic mutations (mu), 604 gene expressions (rs), and 223 protein levels (pp)
brca = brca[,-1937] # discard `vital.status`
names(brca)[1937:1940]
# unique values of responses
unique(brca$PR.Status)
unique(brca$ER.Status)
unique(brca$HER2.Final.Status)
unique(brca$histological.type)
# only use Negative and Positive for PR.status, ER.status, and HER2.Final.Status
# PR.status and ER.status are highly correlated
table(brca$PR.Status)
table(brca$ER.Status)
table(brca$HER2.Final.Status)
table(brca$histological.type)
# sub is the dataset containing no missing values
sub = brca[(brca$PR.Status == "Positive" | brca$PR.Status == "Negative") &
(brca$ER.Status == "Positive" | brca$ER.Status == "Negative") &
(brca$HER2.Final.Status == "Positive" |
brca$HER2.Final.Status == "Negative"),]
dim(sub)
# the input variables have the indices below
# rs 1:604, cn 605:1464, mu 1465:1713, pp 1714:1936
rs = sub[1:604] # the subset that only contains rs
corr = round(cor(rs), 2) # correlation matrix
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,] # stores correlations that are greater than 0.8 -> multicollinearity
# dim(idx)
names(idx) = c("i", "j", "corr")
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
cn = sub[605:1464]
corr = round(cor(cn), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
cn = cn[,-rmv]
mu = sub[1465:1713]
corr = round(cor(mu), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
# there is no multicollinearity within mu, so no variable is removed here
# mu = mu[,-rmv]
pp = sub[1714:1936]
corr = round(cor(pp), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
pp = pp[,-rmv]
n_outlier = 0
row_idx_rs = c()
col_idx_rs = c()
for (i in 1:ncol(rs)) {
col = rs[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_rs = c(col_idx_rs, i)
row_idx_rs = c(row_idx_rs, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_rs = unique(row_idx_rs)
length(row_idx_rs)
length(col_idx_rs)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
for (i in 1:ncol(pp)) {}
for (i in 1:ncol(pp)) {print(i)}
head(pp[,i])
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
brca = read.csv("brca_data_w_subtypes.csv")
dim(brca) # 705 rows, 1941 columns
names(brca)[1937:1941] # outcomes
# 1936 covariates: 860 copy number variations (cn), 249 somatic mutations (mu), 604 gene expressions (rs), and 223 protein levels (pp)
brca = brca[,-1937] # discard `vital.status`
names(brca)[1937:1940]
# unique values of responses
unique(brca$PR.Status)
unique(brca$ER.Status)
unique(brca$HER2.Final.Status)
unique(brca$histological.type)
# only use Negative and Positive for PR.status, ER.status, and HER2.Final.Status
# PR.status and ER.status are highly correlated
table(brca$PR.Status)
table(brca$ER.Status)
table(brca$HER2.Final.Status)
table(brca$histological.type)
# sub is the dataset containing no missing values
sub = brca[(brca$PR.Status == "Positive" | brca$PR.Status == "Negative") &
(brca$ER.Status == "Positive" | brca$ER.Status == "Negative") &
(brca$HER2.Final.Status == "Positive" |
brca$HER2.Final.Status == "Negative"),]
dim(sub)
# the input variables have the indices below
# rs 1:604, cn 605:1464, mu 1465:1713, pp 1714:1936
rs = sub[1:604] # the subset that only contains rs
corr = round(cor(rs), 2) # correlation matrix
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,] # stores correlations that are greater than 0.8 -> multicollinearity
# dim(idx)
names(idx) = c("i", "j", "corr")
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
cn = sub[605:1464]
corr = round(cor(cn), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
cn = cn[,-rmv]
mu = sub[1465:1713]
corr = round(cor(mu), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
# there is no multicollinearity within mu, so no variable is removed here
# mu = mu[,-rmv]
pp = sub[1714:1936]
corr = round(cor(pp), 2)
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,]
dim(idx)
names(idx) = c("i", "j", "corr")
rmv = unique(idx[,1])
length(rmv)
pp = pp[,-rmv]
n_outlier = 0
row_idx_rs = c()
col_idx_rs = c()
for (i in 1:ncol(rs)) {
col = rs[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_rs = c(col_idx_rs, i)
row_idx_rs = c(row_idx_rs, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_rs = unique(row_idx_rs)
length(row_idx_rs)
length(col_idx_rs)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
n_outlier = 0
row_idx_pp = c()
col_idx_pp = c()
for (i in 1:ncol(pp)) {
col = pp[,i]
col = qnorm(rank(col) / (1 + length(col))) # normalize
n_outlier = length(col[col < mean(col) - 3 * sd(col) | col > mean(col) + 3 * sd(col)])
if (n_outlier > 0) {
col_idx_pp = c(col_idx_pp, i)
row_idx_pp = c(row_idx_pp, which(col %in% col[col < mean(col) - 3 * sd(col) |
col > mean(col) + 3 * sd(col)]))
}
}
row_idx_pp = unique(row_idx_pp)
length(row_idx_pp)
length(col_idx_pp)
row_idx = unique(c(row_idx_rs, row_idx_pp))
length(row_idx)
# outlier example
hist(rs[,col_idx_rs[1]],
main = paste("right-skewed example:", names(rs)[col_idx_rs[1]]))
# no outlier example
hist(rs[,1],
main = paste("right-skewed example (no outlier):", names(rs)[1]))
hist(rs[,9],
main = paste("two mode example (no outlier):", names(rs)[9]))
# columns without outliers
# for (i in 1:16) {
#   hist(rs[,i])
# }
for (i in 1:3) {
hist(pp[,i], main = names(pp)[i])
}
for (i in 1:3) {
hist(pp[,i], main = names(pp)[i])
}
for (i in 1:20) {
hist(pp[,i], main = names(pp)[i])
}
for (i in 1:3) {
hist(pp[,i], main = names(pp)[i])
}
hist(pp[,i], main = names(pp)[i])
hist(pp[,1], main = names(pp)[1])
hist(pp_normalized[,1])
# log transform rs and normalize pp
rs_transformed = rs
pp_normalized = pp
for (i in 1:ncol(rs)) {
rs_transformed[,i] = log(1 + rs[,i])
}
for (i in 1:ncol(pp)) {
pp_normalized[,i] = qnorm(rank(pp[,i]) / (1 + length(pp[,i])))
}
hist(pp[,1], main = names(pp)[1])
hist(pp_normalized[,1], main = names(pp_normalized)[1])
hist(pp[,1],
main = paste("Before Normalization", names(pp)[1]))
hist(pp_normalized[,1],
main = paste("After Normalization", names(pp)[1]))
rs = sub[1:604] # the subset that only contains rs
corr = round(cor(rs), 2) # correlation matrix
idx = data.frame(NA, NA, NA)
for (i in 1:nrow(corr)) {
for (j in 1:nrow(corr)) {
if (abs(corr[i, j]) > 0.8 & i < j) {
idx[nrow(idx) + 1,] = c(i, j, corr[i, j])
}
}
}
idx = idx[-1,] # stores correlations that are greater than 0.8 -> multicollinearity
# dim(idx)
names(idx) = c("i", "j", "corr")
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
names(idx) = c("i", "j", "corr")
head(idx)
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
names(idx) = c("i", "j", "corr")
idx[1:3]
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
names(idx) = c("i", "j", "corr")
idx[1:3,]
# remove highly-correlated variables
rmv = unique(idx[,1])
length(rmv)
rs = rs[,-rmv]
hist(brca$rs_CLEC3A)
hist(brca$rs_CLEC3A)
hist(brca$cn_A2ML1)
hist(brca$rs_CLEC3A)
hist(brca$cn_A2ML1)
hist(brca$mu_ABCA12)
hist(brca$pp_A.Raf)
hist(brca$rs_CLEC3A)
hist(brca$cn_A2ML1)
hist(brca$mu_ABCA12)
hist(brca$pp_A.Raf)
names(brca$rs_CLEC3A)
hist(brca$rs_CLEC3A, main="Histogram of rs_CLEC3A")
hist(brca$cn_A2ML1, main="Histogram of cn_A2ML1")
hist(brca$mu_ABCA12, main="Histogram of mu_ABCA12")
hist(brca$pp_A.Raf, main="pp_A.Raf")
hist(brca$rs_CLEC3A, main="Histogram of rs_CLEC3A")
hist(brca$cn_A2ML1, main="Histogram of cn_A2ML1")
hist(brca$mu_ABCA12, main="Histogram of mu_ABCA12")
hist(brca$pp_A.Raf, main="pp_A.Raf")
